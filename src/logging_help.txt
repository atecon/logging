This package provides a way to record the history and progress of a computation as a log of events.

The user adds logging calls to their code to indicate that certain events have occurred. Events are created by inserting a logging statement into the source code, for example:

<hansl>
    Warning("Task XY failed.")
</hansl>

prints:
<printout>
    WARNING: Task XY failed.
</printout>

Using logging provides several advantages over using print or printf statements:

First, it allows you to control the visibility and presentation of messages without editing the source code.

For example, in contrast to the Warning() above

<hansl>
    Debug("This is a debugging message")
</hansl>

will produce no output by default.

Second, it's very cheap to leave debug statements like this in the source code because the system avoids evaluating the message if it would later be ignored.

In this case, the associated string processing of <"This is a debugging message"> will never be executed unless debug logging is enabled.

Third, the logging tools allow you to attach arbitrary data to each event. This allows you to capture local variables and other program state for later analysis. For example, to you can use:

<hansl>
    Info(sprintf("Some vector %g", mnormal(3, 1)
</hansl>

which prints to the console

<printout>
    some vector:
    -0.915662
    -0.542417
    -0.362014
</printout>


Public functions
----------------
"logging" provides a set of convenience functions for simple logging usage. These are:
- Debug()
- Info()
- Warning()
- Error()
- Critical().

All functions share the same structure, e.g.
<Info(const string msg)>
where 'msg' is some string which gets printed to the console. Nothing is returned by this function.



Loglevel
--------

The importance of an event can also be called the "level". Gretl currently supports five log-levels which can be set through the "set loglevel <LEVEL>" command where <LEVEL> can be either be an integer or string value. The currently set loglevel can be accessed by gretl's built-in $loglevel accessor.

The following levels are supported:

level-name   integer    string
------------------------------
debug          0         debug
info           0         info
warning        0         warning
error          0         error
critical       0         critical

To determine when to use logging, see the table below, which states, for each of a set of common tasks, the best tool to use for it (These definitions are borrowed from: https://docs.python.org/3/howto/logging.html).

Debug: Detailed information, typically of interest only when diagnosing problems.

Info: Confirmation that things are working as expected.

Warning: An indication that something unexpected happened, or indicative of some problem in the near future (e.g. ‘disk space low’). The software is still working as expected.

Error: Due to a more serious problem, the software has not been able to perform some function.

Critical: A serious error, indicating that the program itself may be unable to continue running.


Logging with timestamp
----------------------
Gretl includes the "set logstamp <VALUE>" command where <VALUE> is a boolean: set off/0/false for no timestamp, on/1/true for timestamps. The currently set logstamp can be accessed by gretl's built-in $logstamp accessor.



A very simple example
---------------------
<hansl>
    include logging.gfn
    Warning("Watch out!")          # will print a message to the console
    Info("I told you so")          # will not print anything
</hansl>

and you will see
<WARNING: Watch out!>
printed out on the console.


Logging to a file
-----------------
A common situation is that of recording logging events in a file. This is currently not supported by gretl. However, you can always direct stdout and stderror output to a log-file.

For instance, when executing a gretl script via the terminal or shell on linux, one can direct the _all_ output to some file by:
<>
gretlcli -b > mylogfile.txt 2>&1
</>

An alternative way would be to make use of gretl's "outfile" command (see 'help outfile' for details).



Changelog:
----------
v0.1 (May 2021)
- Initial version.

